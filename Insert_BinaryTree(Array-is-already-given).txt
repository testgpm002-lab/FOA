class Node:
def init (self,key):
self.left = None self.right = None self.val = key

# A utility function to insert a new node with the given key def insert(root,node):
if root is None:
root = node
else:
if root.val < node.val:
if root.right is None:
root.right = node
 


else:
 
else:
 

insert(root.right, node)
 
if root.left is None:
root.left = node
else:
insert(root.left, node)

# A utility function to do inorder tree traversal def inorder(root):
if root:
inorder(root.left) print(root.val) inorder(root.right)


# Driver program to test the above functions # Let us create the following BST
#	50
# /	\
# 30	70
# / \ / \
# 20 40 60 80
r = Node(50) insert(r,Node(4)) insert(r,Node(14)) insert(r,Node(24)) insert(r,Node(34)) insert(r,Node(54)) insert(r,Node(64))

# Print inoder traversal of the BST inorder(r)
